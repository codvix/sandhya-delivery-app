generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  phone     String   @unique
  password  String
  name      String
  email     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
  addresses Address[]
  restaurants Restaurant[]
  notifications UserNotification[]
  couponUsages CouponUsage[]
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  label     String   // Home, Work, Other
  street    String
  city      String
  state     String
  zipCode   String
  landmark  String?
  latitude  Float?   // Address latitude for distance calculation
  longitude Float?   // Address longitude for distance calculation
  isDefault Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orders    Order[]
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  coverImage  String?
  rating      Float    @default(4.0)
  totalRatings Int     @default(0)
  deliveryTime String  @default("30-40 mins")
  costForTwo  Int      @default(3000)
  cuisines    String?   // comma-separated
  isOpen      Boolean  @default(true)
  address     String
  latitude    Float?   // Restaurant latitude for distance calculation
  longitude   Float?   // Restaurant longitude for distance calculation
  phone       String?
  gstNumber   String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  menuItems   MenuItem[]
  orders      Order[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  icon      String?
  order     Int      @default(0)
  
  menuItems MenuItem[]
}

model MenuItem {
  id           String   @id @default(cuid())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])
  
  name         String
  description  String
  price        Int      // in cents
  image        String?
  isVeg        Boolean  @default(true)
  isAvailable  Boolean  @default(true)
  isPopular    Boolean  @default(false)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  orderItems   OrderItem[]
}

model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique
  
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  
  addressId    String
  address      Address     @relation(fields: [addressId], references: [id])
  
  status       OrderStatus @default(PENDING)
  deliveryLevel DeliveryLevel @default(STANDARD)
  
  subtotal     Int         // in cents
  deliveryFee  Int         // in cents
  tax          Int         // in cents
  tip          Int         @default(0) // in cents
  couponId     String?     // Optional coupon applied
  coupon       Coupon?     @relation(fields: [couponId], references: [id])
  discount     Int         @default(0) // Discount amount in cents
  total        Int         // in cents
  
  paymentMethod String     // COD, CARD, UPI
  paymentStatus PaymentStatus @default(PENDING)
  
  specialInstructions String?
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  items        OrderItem[]
  invoice      Invoice?
  couponUsages CouponUsage[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  
  quantity   Int
  price      Int      // in cents (price at time of order)
  
  createdAt  DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  RESTAURANT_OWNER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DeliveryLevel {
  STANDARD
  EXPRESS
  PRIORITY
}

model Invoice {
  id             String   @id @default(cuid())
  orderId        String   @unique
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  invoiceNumber  String   @unique
  amount         Int      // in cents
  createdAt      DateTime @default(now())
}

model Banner {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String
  link        String?  // Optional link when banner is clicked
  isActive    Boolean  @default(true)
  order       Int      @default(0) // For ordering banners
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminNotification {
  id           String   @id @default(cuid())
  type         String   // 'new_order', 'order_status_change', etc.
  title        String
  message      String
  orderId      String?  // Reference to order if applicable
  orderNumber  String?  // Order number for display
  status       String?  // Order status
  read         Boolean  @default(false)
  restaurantName String?
  customerName String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserNotification {
  id           String   @id @default(cuid())
  userId       String   // Reference to user
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type         String   // 'order_status', 'order_created', 'order_delivered', etc.
  title        String
  message      String
  orderId      String?  // Reference to order if applicable
  orderNumber  String?  // Order number for display
  status       String?  // Order status
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Coupon {
  id              String      @id @default(cuid())
  code            String      @unique
  name            String
  description     String?
  type            CouponType  @default(PERCENTAGE)
  value           Int         // Percentage (1-100) or fixed amount in cents
  minOrderAmount  Int?        // Minimum order amount in cents
  maxDiscount     Int?        // Maximum discount amount in cents (for percentage coupons)
  usageLimit      Int?        // Total usage limit (null = unlimited)
  usedCount       Int         @default(0)
  isActive        Boolean     @default(true)
  validFrom       DateTime    @default(now())
  validUntil      DateTime?
  applicableTo    String?     // Restaurant ID (null = all restaurants)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  orders          Order[]
  couponUsages    CouponUsage[]
}

model CouponUsage {
  id        String   @id @default(cuid())
  couponId  String
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discountAmount Int // Amount saved in cents
  createdAt DateTime @default(now())
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}
